//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.239
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 4.0.50826.0
// 
namespace Jukebox.Client2.JukeboxService {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Track", Namespace="http://schemas.datacontract.org/2004/07/Jukebox.Server.Models")]
    public partial class Track : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.TimeSpan DurationField;
        
        private string IdField;
        
        private string SingerField;
        
        private Jukebox.Client2.JukeboxService.TrackSource SourceField;
        
        private Jukebox.Client2.JukeboxService.TrackState StateField;
        
        private string TitleField;
        
        private System.Uri UriField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.TimeSpan Duration {
            get {
                return this.DurationField;
            }
            set {
                if ((this.DurationField.Equals(value) != true)) {
                    this.DurationField = value;
                    this.RaisePropertyChanged("Duration");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Id {
            get {
                return this.IdField;
            }
            set {
                if ((object.ReferenceEquals(this.IdField, value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Singer {
            get {
                return this.SingerField;
            }
            set {
                if ((object.ReferenceEquals(this.SingerField, value) != true)) {
                    this.SingerField = value;
                    this.RaisePropertyChanged("Singer");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Jukebox.Client2.JukeboxService.TrackSource Source {
            get {
                return this.SourceField;
            }
            set {
                if ((this.SourceField.Equals(value) != true)) {
                    this.SourceField = value;
                    this.RaisePropertyChanged("Source");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Jukebox.Client2.JukeboxService.TrackState State {
            get {
                return this.StateField;
            }
            set {
                if ((this.StateField.Equals(value) != true)) {
                    this.StateField = value;
                    this.RaisePropertyChanged("State");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Title {
            get {
                return this.TitleField;
            }
            set {
                if ((object.ReferenceEquals(this.TitleField, value) != true)) {
                    this.TitleField = value;
                    this.RaisePropertyChanged("Title");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Uri Uri {
            get {
                return this.UriField;
            }
            set {
                if ((object.ReferenceEquals(this.UriField, value) != true)) {
                    this.UriField = value;
                    this.RaisePropertyChanged("Uri");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TrackSource", Namespace="http://schemas.datacontract.org/2004/07/Jukebox.Server.Models")]
    public enum TrackSource : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        VK = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Cache = 1,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TrackState", Namespace="http://schemas.datacontract.org/2004/07/Jukebox.Server.Models")]
    public enum TrackState : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Unknown = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Downloading = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Ready = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Playing = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Finished = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Failed = 5,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Playlist", Namespace="http://schemas.datacontract.org/2004/07/Jukebox.Server.Models")]
    public partial class Playlist : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string ThemeField;
        
        private System.Collections.ObjectModel.ObservableCollection<Jukebox.Client2.JukeboxService.Track> TracksField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Theme {
            get {
                return this.ThemeField;
            }
            set {
                if ((object.ReferenceEquals(this.ThemeField, value) != true)) {
                    this.ThemeField = value;
                    this.RaisePropertyChanged("Theme");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<Jukebox.Client2.JukeboxService.Track> Tracks {
            get {
                return this.TracksField;
            }
            set {
                if ((object.ReferenceEquals(this.TracksField, value) != true)) {
                    this.TracksField = value;
                    this.RaisePropertyChanged("Tracks");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="JukeboxService.IPlayerService", CallbackContract=typeof(Jukebox.Client2.JukeboxService.IPlayerServiceCallback))]
    public interface IPlayerService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPlayerService/GetCurrentTrack", ReplyAction="http://tempuri.org/IPlayerService/GetCurrentTrackResponse")]
        System.IAsyncResult BeginGetCurrentTrack(System.AsyncCallback callback, object asyncState);
        
        Jukebox.Client2.JukeboxService.Track EndGetCurrentTrack(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPlayerService/GetVolumeLevel", ReplyAction="http://tempuri.org/IPlayerService/GetVolumeLevelResponse")]
        System.IAsyncResult BeginGetVolumeLevel(System.AsyncCallback callback, object asyncState);
        
        double EndGetVolumeLevel(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPlayerService/SetVolumeLevel", ReplyAction="http://tempuri.org/IPlayerService/SetVolumeLevelResponse")]
        System.IAsyncResult BeginSetVolumeLevel(double value, System.AsyncCallback callback, object asyncState);
        
        void EndSetVolumeLevel(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPlayerServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPlayerService/OnCurrentTrackChanged")]
        void OnCurrentTrackChanged(Jukebox.Client2.JukeboxService.Track track);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPlayerServiceChannel : Jukebox.Client2.JukeboxService.IPlayerService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetCurrentTrackCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetCurrentTrackCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Jukebox.Client2.JukeboxService.Track Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Jukebox.Client2.JukeboxService.Track)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetVolumeLevelCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetVolumeLevelCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public double Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((double)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PlayerServiceClient : System.ServiceModel.DuplexClientBase<Jukebox.Client2.JukeboxService.IPlayerService>, Jukebox.Client2.JukeboxService.IPlayerService {
        
        private BeginOperationDelegate onBeginGetCurrentTrackDelegate;
        
        private EndOperationDelegate onEndGetCurrentTrackDelegate;
        
        private System.Threading.SendOrPostCallback onGetCurrentTrackCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetVolumeLevelDelegate;
        
        private EndOperationDelegate onEndGetVolumeLevelDelegate;
        
        private System.Threading.SendOrPostCallback onGetVolumeLevelCompletedDelegate;
        
        private BeginOperationDelegate onBeginSetVolumeLevelDelegate;
        
        private EndOperationDelegate onEndSetVolumeLevelDelegate;
        
        private System.Threading.SendOrPostCallback onSetVolumeLevelCompletedDelegate;
        
        private bool useGeneratedCallback;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public PlayerServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public PlayerServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public PlayerServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public PlayerServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public PlayerServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public PlayerServiceClient(string endpointConfigurationName) : 
                this(new PlayerServiceClientCallback(), endpointConfigurationName) {
        }
        
        private PlayerServiceClient(PlayerServiceClientCallback callbackImpl, string endpointConfigurationName) : 
                this(new System.ServiceModel.InstanceContext(callbackImpl), endpointConfigurationName) {
            useGeneratedCallback = true;
            callbackImpl.Initialize(this);
        }
        
        public PlayerServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                this(new PlayerServiceClientCallback(), binding, remoteAddress) {
        }
        
        private PlayerServiceClient(PlayerServiceClientCallback callbackImpl, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                this(new System.ServiceModel.InstanceContext(callbackImpl), binding, remoteAddress) {
            useGeneratedCallback = true;
            callbackImpl.Initialize(this);
        }
        
        public PlayerServiceClient() : 
                this(new PlayerServiceClientCallback()) {
        }
        
        private PlayerServiceClient(PlayerServiceClientCallback callbackImpl) : 
                this(new System.ServiceModel.InstanceContext(callbackImpl)) {
            useGeneratedCallback = true;
            callbackImpl.Initialize(this);
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<GetCurrentTrackCompletedEventArgs> GetCurrentTrackCompleted;
        
        public event System.EventHandler<GetVolumeLevelCompletedEventArgs> GetVolumeLevelCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> SetVolumeLevelCompleted;
        
        public event System.EventHandler<OnCurrentTrackChangedReceivedEventArgs> OnCurrentTrackChangedReceived;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Jukebox.Client2.JukeboxService.IPlayerService.BeginGetCurrentTrack(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetCurrentTrack(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Jukebox.Client2.JukeboxService.Track Jukebox.Client2.JukeboxService.IPlayerService.EndGetCurrentTrack(System.IAsyncResult result) {
            return base.Channel.EndGetCurrentTrack(result);
        }
        
        private System.IAsyncResult OnBeginGetCurrentTrack(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            return ((Jukebox.Client2.JukeboxService.IPlayerService)(this)).BeginGetCurrentTrack(callback, asyncState);
        }
        
        private object[] OnEndGetCurrentTrack(System.IAsyncResult result) {
            Jukebox.Client2.JukeboxService.Track retVal = ((Jukebox.Client2.JukeboxService.IPlayerService)(this)).EndGetCurrentTrack(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetCurrentTrackCompleted(object state) {
            if ((this.GetCurrentTrackCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetCurrentTrackCompleted(this, new GetCurrentTrackCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetCurrentTrackAsync() {
            this.GetCurrentTrackAsync(null);
        }
        
        public void GetCurrentTrackAsync(object userState) {
            if ((this.onBeginGetCurrentTrackDelegate == null)) {
                this.onBeginGetCurrentTrackDelegate = new BeginOperationDelegate(this.OnBeginGetCurrentTrack);
            }
            if ((this.onEndGetCurrentTrackDelegate == null)) {
                this.onEndGetCurrentTrackDelegate = new EndOperationDelegate(this.OnEndGetCurrentTrack);
            }
            if ((this.onGetCurrentTrackCompletedDelegate == null)) {
                this.onGetCurrentTrackCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetCurrentTrackCompleted);
            }
            base.InvokeAsync(this.onBeginGetCurrentTrackDelegate, null, this.onEndGetCurrentTrackDelegate, this.onGetCurrentTrackCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Jukebox.Client2.JukeboxService.IPlayerService.BeginGetVolumeLevel(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetVolumeLevel(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        double Jukebox.Client2.JukeboxService.IPlayerService.EndGetVolumeLevel(System.IAsyncResult result) {
            return base.Channel.EndGetVolumeLevel(result);
        }
        
        private System.IAsyncResult OnBeginGetVolumeLevel(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            return ((Jukebox.Client2.JukeboxService.IPlayerService)(this)).BeginGetVolumeLevel(callback, asyncState);
        }
        
        private object[] OnEndGetVolumeLevel(System.IAsyncResult result) {
            double retVal = ((Jukebox.Client2.JukeboxService.IPlayerService)(this)).EndGetVolumeLevel(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetVolumeLevelCompleted(object state) {
            if ((this.GetVolumeLevelCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetVolumeLevelCompleted(this, new GetVolumeLevelCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetVolumeLevelAsync() {
            this.GetVolumeLevelAsync(null);
        }
        
        public void GetVolumeLevelAsync(object userState) {
            if ((this.onBeginGetVolumeLevelDelegate == null)) {
                this.onBeginGetVolumeLevelDelegate = new BeginOperationDelegate(this.OnBeginGetVolumeLevel);
            }
            if ((this.onEndGetVolumeLevelDelegate == null)) {
                this.onEndGetVolumeLevelDelegate = new EndOperationDelegate(this.OnEndGetVolumeLevel);
            }
            if ((this.onGetVolumeLevelCompletedDelegate == null)) {
                this.onGetVolumeLevelCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetVolumeLevelCompleted);
            }
            base.InvokeAsync(this.onBeginGetVolumeLevelDelegate, null, this.onEndGetVolumeLevelDelegate, this.onGetVolumeLevelCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Jukebox.Client2.JukeboxService.IPlayerService.BeginSetVolumeLevel(double value, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSetVolumeLevel(value, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void Jukebox.Client2.JukeboxService.IPlayerService.EndSetVolumeLevel(System.IAsyncResult result) {
            base.Channel.EndSetVolumeLevel(result);
        }
        
        private System.IAsyncResult OnBeginSetVolumeLevel(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            double value = ((double)(inValues[0]));
            return ((Jukebox.Client2.JukeboxService.IPlayerService)(this)).BeginSetVolumeLevel(value, callback, asyncState);
        }
        
        private object[] OnEndSetVolumeLevel(System.IAsyncResult result) {
            ((Jukebox.Client2.JukeboxService.IPlayerService)(this)).EndSetVolumeLevel(result);
            return null;
        }
        
        private void OnSetVolumeLevelCompleted(object state) {
            if ((this.SetVolumeLevelCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SetVolumeLevelCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SetVolumeLevelAsync(double value) {
            this.SetVolumeLevelAsync(value, null);
        }
        
        public void SetVolumeLevelAsync(double value, object userState) {
            if ((this.onBeginSetVolumeLevelDelegate == null)) {
                this.onBeginSetVolumeLevelDelegate = new BeginOperationDelegate(this.OnBeginSetVolumeLevel);
            }
            if ((this.onEndSetVolumeLevelDelegate == null)) {
                this.onEndSetVolumeLevelDelegate = new EndOperationDelegate(this.OnEndSetVolumeLevel);
            }
            if ((this.onSetVolumeLevelCompletedDelegate == null)) {
                this.onSetVolumeLevelCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSetVolumeLevelCompleted);
            }
            base.InvokeAsync(this.onBeginSetVolumeLevelDelegate, new object[] {
                        value}, this.onEndSetVolumeLevelDelegate, this.onSetVolumeLevelCompletedDelegate, userState);
        }
        
        private void OnOnCurrentTrackChangedReceived(object state) {
            if ((this.OnCurrentTrackChangedReceived != null)) {
                object[] results = ((object[])(state));
                this.OnCurrentTrackChangedReceived(this, new OnCurrentTrackChangedReceivedEventArgs(results, null, false, null));
            }
        }
        
        private void VerifyCallbackEvents() {
            if (((this.useGeneratedCallback != true) 
                        && (this.OnCurrentTrackChangedReceived != null))) {
                throw new System.InvalidOperationException("Callback events cannot be used when the callback InstanceContext is specified. Pl" +
                        "ease choose between specifying the callback InstanceContext or subscribing to th" +
                        "e callback events.");
            }
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override Jukebox.Client2.JukeboxService.IPlayerService CreateChannel() {
            return new PlayerServiceClientChannel(this);
        }
        
        private class PlayerServiceClientCallback : object, IPlayerServiceCallback {
            
            private PlayerServiceClient proxy;
            
            public void Initialize(PlayerServiceClient proxy) {
                this.proxy = proxy;
            }
            
            public void OnCurrentTrackChanged(Jukebox.Client2.JukeboxService.Track track) {
                this.proxy.OnOnCurrentTrackChangedReceived(new object[] {
                            track});
            }
        }
        
        private class PlayerServiceClientChannel : ChannelBase<Jukebox.Client2.JukeboxService.IPlayerService>, Jukebox.Client2.JukeboxService.IPlayerService {
            
            public PlayerServiceClientChannel(System.ServiceModel.DuplexClientBase<Jukebox.Client2.JukeboxService.IPlayerService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginGetCurrentTrack(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetCurrentTrack", _args, callback, asyncState);
                return _result;
            }
            
            public Jukebox.Client2.JukeboxService.Track EndGetCurrentTrack(System.IAsyncResult result) {
                object[] _args = new object[0];
                Jukebox.Client2.JukeboxService.Track _result = ((Jukebox.Client2.JukeboxService.Track)(base.EndInvoke("GetCurrentTrack", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetVolumeLevel(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetVolumeLevel", _args, callback, asyncState);
                return _result;
            }
            
            public double EndGetVolumeLevel(System.IAsyncResult result) {
                object[] _args = new object[0];
                double _result = ((double)(base.EndInvoke("GetVolumeLevel", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginSetVolumeLevel(double value, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = value;
                System.IAsyncResult _result = base.BeginInvoke("SetVolumeLevel", _args, callback, asyncState);
                return _result;
            }
            
            public void EndSetVolumeLevel(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("SetVolumeLevel", _args, result);
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="JukeboxService.IPlaylistService", CallbackContract=typeof(Jukebox.Client2.JukeboxService.IPlaylistServiceCallback))]
    public interface IPlaylistService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPlaylistService/GetPlaylist", ReplyAction="http://tempuri.org/IPlaylistService/GetPlaylistResponse")]
        System.IAsyncResult BeginGetPlaylist(System.AsyncCallback callback, object asyncState);
        
        Jukebox.Client2.JukeboxService.Playlist EndGetPlaylist(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, AsyncPattern=true, Action="http://tempuri.org/IPlaylistService/Add")]
        System.IAsyncResult BeginAdd(Jukebox.Client2.JukeboxService.Track track, System.AsyncCallback callback, object asyncState);
        
        void EndAdd(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, AsyncPattern=true, Action="http://tempuri.org/IPlaylistService/Remove")]
        System.IAsyncResult BeginRemove(Jukebox.Client2.JukeboxService.Track track, System.AsyncCallback callback, object asyncState);
        
        void EndRemove(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPlaylistService/Next", ReplyAction="http://tempuri.org/IPlaylistService/NextResponse")]
        System.IAsyncResult BeginNext(System.AsyncCallback callback, object asyncState);
        
        string EndNext(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPlaylistServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPlaylistService/OnTrackAdded")]
        void OnTrackAdded(Jukebox.Client2.JukeboxService.Track track);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPlaylistService/OnTrackRemoved")]
        void OnTrackRemoved(Jukebox.Client2.JukeboxService.Track track);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPlaylistService/OnTrackStateChanged")]
        void OnTrackStateChanged(Jukebox.Client2.JukeboxService.Track track);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPlaylistServiceChannel : Jukebox.Client2.JukeboxService.IPlaylistService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetPlaylistCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetPlaylistCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Jukebox.Client2.JukeboxService.Playlist Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Jukebox.Client2.JukeboxService.Playlist)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class NextCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public NextCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PlaylistServiceClient : System.ServiceModel.DuplexClientBase<Jukebox.Client2.JukeboxService.IPlaylistService>, Jukebox.Client2.JukeboxService.IPlaylistService {
        
        private BeginOperationDelegate onBeginGetPlaylistDelegate;
        
        private EndOperationDelegate onEndGetPlaylistDelegate;
        
        private System.Threading.SendOrPostCallback onGetPlaylistCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddDelegate;
        
        private EndOperationDelegate onEndAddDelegate;
        
        private System.Threading.SendOrPostCallback onAddCompletedDelegate;
        
        private BeginOperationDelegate onBeginRemoveDelegate;
        
        private EndOperationDelegate onEndRemoveDelegate;
        
        private System.Threading.SendOrPostCallback onRemoveCompletedDelegate;
        
        private BeginOperationDelegate onBeginNextDelegate;
        
        private EndOperationDelegate onEndNextDelegate;
        
        private System.Threading.SendOrPostCallback onNextCompletedDelegate;
        
        private bool useGeneratedCallback;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public PlaylistServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public PlaylistServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public PlaylistServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public PlaylistServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public PlaylistServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public PlaylistServiceClient(string endpointConfigurationName) : 
                this(new PlaylistServiceClientCallback(), endpointConfigurationName) {
        }
        
        private PlaylistServiceClient(PlaylistServiceClientCallback callbackImpl, string endpointConfigurationName) : 
                this(new System.ServiceModel.InstanceContext(callbackImpl), endpointConfigurationName) {
            useGeneratedCallback = true;
            callbackImpl.Initialize(this);
        }
        
        public PlaylistServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                this(new PlaylistServiceClientCallback(), binding, remoteAddress) {
        }
        
        private PlaylistServiceClient(PlaylistServiceClientCallback callbackImpl, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                this(new System.ServiceModel.InstanceContext(callbackImpl), binding, remoteAddress) {
            useGeneratedCallback = true;
            callbackImpl.Initialize(this);
        }
        
        public PlaylistServiceClient() : 
                this(new PlaylistServiceClientCallback()) {
        }
        
        private PlaylistServiceClient(PlaylistServiceClientCallback callbackImpl) : 
                this(new System.ServiceModel.InstanceContext(callbackImpl)) {
            useGeneratedCallback = true;
            callbackImpl.Initialize(this);
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<GetPlaylistCompletedEventArgs> GetPlaylistCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> AddCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> RemoveCompleted;
        
        public event System.EventHandler<NextCompletedEventArgs> NextCompleted;
        
        public event System.EventHandler<OnTrackAddedReceivedEventArgs> OnTrackAddedReceived;
        
        public event System.EventHandler<OnTrackRemovedReceivedEventArgs> OnTrackRemovedReceived;
        
        public event System.EventHandler<OnTrackStateChangedReceivedEventArgs> OnTrackStateChangedReceived;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Jukebox.Client2.JukeboxService.IPlaylistService.BeginGetPlaylist(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetPlaylist(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Jukebox.Client2.JukeboxService.Playlist Jukebox.Client2.JukeboxService.IPlaylistService.EndGetPlaylist(System.IAsyncResult result) {
            return base.Channel.EndGetPlaylist(result);
        }
        
        private System.IAsyncResult OnBeginGetPlaylist(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            return ((Jukebox.Client2.JukeboxService.IPlaylistService)(this)).BeginGetPlaylist(callback, asyncState);
        }
        
        private object[] OnEndGetPlaylist(System.IAsyncResult result) {
            Jukebox.Client2.JukeboxService.Playlist retVal = ((Jukebox.Client2.JukeboxService.IPlaylistService)(this)).EndGetPlaylist(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetPlaylistCompleted(object state) {
            if ((this.GetPlaylistCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetPlaylistCompleted(this, new GetPlaylistCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetPlaylistAsync() {
            this.GetPlaylistAsync(null);
        }
        
        public void GetPlaylistAsync(object userState) {
            if ((this.onBeginGetPlaylistDelegate == null)) {
                this.onBeginGetPlaylistDelegate = new BeginOperationDelegate(this.OnBeginGetPlaylist);
            }
            if ((this.onEndGetPlaylistDelegate == null)) {
                this.onEndGetPlaylistDelegate = new EndOperationDelegate(this.OnEndGetPlaylist);
            }
            if ((this.onGetPlaylistCompletedDelegate == null)) {
                this.onGetPlaylistCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetPlaylistCompleted);
            }
            base.InvokeAsync(this.onBeginGetPlaylistDelegate, null, this.onEndGetPlaylistDelegate, this.onGetPlaylistCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Jukebox.Client2.JukeboxService.IPlaylistService.BeginAdd(Jukebox.Client2.JukeboxService.Track track, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAdd(track, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void Jukebox.Client2.JukeboxService.IPlaylistService.EndAdd(System.IAsyncResult result) {
            base.Channel.EndAdd(result);
        }
        
        private System.IAsyncResult OnBeginAdd(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            Jukebox.Client2.JukeboxService.Track track = ((Jukebox.Client2.JukeboxService.Track)(inValues[0]));
            return ((Jukebox.Client2.JukeboxService.IPlaylistService)(this)).BeginAdd(track, callback, asyncState);
        }
        
        private object[] OnEndAdd(System.IAsyncResult result) {
            ((Jukebox.Client2.JukeboxService.IPlaylistService)(this)).EndAdd(result);
            return null;
        }
        
        private void OnAddCompleted(object state) {
            if ((this.AddCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddAsync(Jukebox.Client2.JukeboxService.Track track) {
            this.AddAsync(track, null);
        }
        
        public void AddAsync(Jukebox.Client2.JukeboxService.Track track, object userState) {
            if ((this.onBeginAddDelegate == null)) {
                this.onBeginAddDelegate = new BeginOperationDelegate(this.OnBeginAdd);
            }
            if ((this.onEndAddDelegate == null)) {
                this.onEndAddDelegate = new EndOperationDelegate(this.OnEndAdd);
            }
            if ((this.onAddCompletedDelegate == null)) {
                this.onAddCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddCompleted);
            }
            base.InvokeAsync(this.onBeginAddDelegate, new object[] {
                        track}, this.onEndAddDelegate, this.onAddCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Jukebox.Client2.JukeboxService.IPlaylistService.BeginRemove(Jukebox.Client2.JukeboxService.Track track, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRemove(track, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void Jukebox.Client2.JukeboxService.IPlaylistService.EndRemove(System.IAsyncResult result) {
            base.Channel.EndRemove(result);
        }
        
        private System.IAsyncResult OnBeginRemove(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            Jukebox.Client2.JukeboxService.Track track = ((Jukebox.Client2.JukeboxService.Track)(inValues[0]));
            return ((Jukebox.Client2.JukeboxService.IPlaylistService)(this)).BeginRemove(track, callback, asyncState);
        }
        
        private object[] OnEndRemove(System.IAsyncResult result) {
            ((Jukebox.Client2.JukeboxService.IPlaylistService)(this)).EndRemove(result);
            return null;
        }
        
        private void OnRemoveCompleted(object state) {
            if ((this.RemoveCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RemoveCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RemoveAsync(Jukebox.Client2.JukeboxService.Track track) {
            this.RemoveAsync(track, null);
        }
        
        public void RemoveAsync(Jukebox.Client2.JukeboxService.Track track, object userState) {
            if ((this.onBeginRemoveDelegate == null)) {
                this.onBeginRemoveDelegate = new BeginOperationDelegate(this.OnBeginRemove);
            }
            if ((this.onEndRemoveDelegate == null)) {
                this.onEndRemoveDelegate = new EndOperationDelegate(this.OnEndRemove);
            }
            if ((this.onRemoveCompletedDelegate == null)) {
                this.onRemoveCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRemoveCompleted);
            }
            base.InvokeAsync(this.onBeginRemoveDelegate, new object[] {
                        track}, this.onEndRemoveDelegate, this.onRemoveCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Jukebox.Client2.JukeboxService.IPlaylistService.BeginNext(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginNext(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string Jukebox.Client2.JukeboxService.IPlaylistService.EndNext(System.IAsyncResult result) {
            return base.Channel.EndNext(result);
        }
        
        private System.IAsyncResult OnBeginNext(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            return ((Jukebox.Client2.JukeboxService.IPlaylistService)(this)).BeginNext(callback, asyncState);
        }
        
        private object[] OnEndNext(System.IAsyncResult result) {
            string retVal = ((Jukebox.Client2.JukeboxService.IPlaylistService)(this)).EndNext(result);
            return new object[] {
                    retVal};
        }
        
        private void OnNextCompleted(object state) {
            if ((this.NextCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.NextCompleted(this, new NextCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void NextAsync() {
            this.NextAsync(null);
        }
        
        public void NextAsync(object userState) {
            if ((this.onBeginNextDelegate == null)) {
                this.onBeginNextDelegate = new BeginOperationDelegate(this.OnBeginNext);
            }
            if ((this.onEndNextDelegate == null)) {
                this.onEndNextDelegate = new EndOperationDelegate(this.OnEndNext);
            }
            if ((this.onNextCompletedDelegate == null)) {
                this.onNextCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnNextCompleted);
            }
            base.InvokeAsync(this.onBeginNextDelegate, null, this.onEndNextDelegate, this.onNextCompletedDelegate, userState);
        }
        
        private void OnOnTrackAddedReceived(object state) {
            if ((this.OnTrackAddedReceived != null)) {
                object[] results = ((object[])(state));
                this.OnTrackAddedReceived(this, new OnTrackAddedReceivedEventArgs(results, null, false, null));
            }
        }
        
        private void OnOnTrackRemovedReceived(object state) {
            if ((this.OnTrackRemovedReceived != null)) {
                object[] results = ((object[])(state));
                this.OnTrackRemovedReceived(this, new OnTrackRemovedReceivedEventArgs(results, null, false, null));
            }
        }
        
        private void OnOnTrackStateChangedReceived(object state) {
            if ((this.OnTrackStateChangedReceived != null)) {
                object[] results = ((object[])(state));
                this.OnTrackStateChangedReceived(this, new OnTrackStateChangedReceivedEventArgs(results, null, false, null));
            }
        }
        
        private void VerifyCallbackEvents() {
            if (((this.useGeneratedCallback != true) 
                        && (((this.OnTrackAddedReceived != null) 
                        || (this.OnTrackRemovedReceived != null)) 
                        || (this.OnTrackStateChangedReceived != null)))) {
                throw new System.InvalidOperationException("Callback events cannot be used when the callback InstanceContext is specified. Pl" +
                        "ease choose between specifying the callback InstanceContext or subscribing to th" +
                        "e callback events.");
            }
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override Jukebox.Client2.JukeboxService.IPlaylistService CreateChannel() {
            return new PlaylistServiceClientChannel(this);
        }
        
        private class PlaylistServiceClientCallback : object, IPlaylistServiceCallback {
            
            private PlaylistServiceClient proxy;
            
            public void Initialize(PlaylistServiceClient proxy) {
                this.proxy = proxy;
            }
            
            public void OnTrackAdded(Jukebox.Client2.JukeboxService.Track track) {
                this.proxy.OnOnTrackAddedReceived(new object[] {
                            track});
            }
            
            public void OnTrackRemoved(Jukebox.Client2.JukeboxService.Track track) {
                this.proxy.OnOnTrackRemovedReceived(new object[] {
                            track});
            }
            
            public void OnTrackStateChanged(Jukebox.Client2.JukeboxService.Track track) {
                this.proxy.OnOnTrackStateChangedReceived(new object[] {
                            track});
            }
        }
        
        private class PlaylistServiceClientChannel : ChannelBase<Jukebox.Client2.JukeboxService.IPlaylistService>, Jukebox.Client2.JukeboxService.IPlaylistService {
            
            public PlaylistServiceClientChannel(System.ServiceModel.DuplexClientBase<Jukebox.Client2.JukeboxService.IPlaylistService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginGetPlaylist(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetPlaylist", _args, callback, asyncState);
                return _result;
            }
            
            public Jukebox.Client2.JukeboxService.Playlist EndGetPlaylist(System.IAsyncResult result) {
                object[] _args = new object[0];
                Jukebox.Client2.JukeboxService.Playlist _result = ((Jukebox.Client2.JukeboxService.Playlist)(base.EndInvoke("GetPlaylist", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginAdd(Jukebox.Client2.JukeboxService.Track track, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = track;
                System.IAsyncResult _result = base.BeginInvoke("Add", _args, callback, asyncState);
                return _result;
            }
            
            public void EndAdd(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("Add", _args, result);
            }
            
            public System.IAsyncResult BeginRemove(Jukebox.Client2.JukeboxService.Track track, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = track;
                System.IAsyncResult _result = base.BeginInvoke("Remove", _args, callback, asyncState);
                return _result;
            }
            
            public void EndRemove(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("Remove", _args, result);
            }
            
            public System.IAsyncResult BeginNext(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("Next", _args, callback, asyncState);
                return _result;
            }
            
            public string EndNext(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("Next", _args, result)));
                return _result;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="JukeboxService.ISearchService")]
    public interface ISearchService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISearchService/Search", ReplyAction="http://tempuri.org/ISearchService/SearchResponse")]
        System.IAsyncResult BeginSearch(string query, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<Jukebox.Client2.JukeboxService.Track> EndSearch(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISearchServiceChannel : Jukebox.Client2.JukeboxService.ISearchService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SearchCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SearchCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<Jukebox.Client2.JukeboxService.Track> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<Jukebox.Client2.JukeboxService.Track>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SearchServiceClient : System.ServiceModel.ClientBase<Jukebox.Client2.JukeboxService.ISearchService>, Jukebox.Client2.JukeboxService.ISearchService {
        
        private BeginOperationDelegate onBeginSearchDelegate;
        
        private EndOperationDelegate onEndSearchDelegate;
        
        private System.Threading.SendOrPostCallback onSearchCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public SearchServiceClient() {
        }
        
        public SearchServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public SearchServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SearchServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SearchServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<SearchCompletedEventArgs> SearchCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Jukebox.Client2.JukeboxService.ISearchService.BeginSearch(string query, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSearch(query, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<Jukebox.Client2.JukeboxService.Track> Jukebox.Client2.JukeboxService.ISearchService.EndSearch(System.IAsyncResult result) {
            return base.Channel.EndSearch(result);
        }
        
        private System.IAsyncResult OnBeginSearch(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string query = ((string)(inValues[0]));
            return ((Jukebox.Client2.JukeboxService.ISearchService)(this)).BeginSearch(query, callback, asyncState);
        }
        
        private object[] OnEndSearch(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<Jukebox.Client2.JukeboxService.Track> retVal = ((Jukebox.Client2.JukeboxService.ISearchService)(this)).EndSearch(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSearchCompleted(object state) {
            if ((this.SearchCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SearchCompleted(this, new SearchCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SearchAsync(string query) {
            this.SearchAsync(query, null);
        }
        
        public void SearchAsync(string query, object userState) {
            if ((this.onBeginSearchDelegate == null)) {
                this.onBeginSearchDelegate = new BeginOperationDelegate(this.OnBeginSearch);
            }
            if ((this.onEndSearchDelegate == null)) {
                this.onEndSearchDelegate = new EndOperationDelegate(this.OnEndSearch);
            }
            if ((this.onSearchCompletedDelegate == null)) {
                this.onSearchCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSearchCompleted);
            }
            base.InvokeAsync(this.onBeginSearchDelegate, new object[] {
                        query}, this.onEndSearchDelegate, this.onSearchCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override Jukebox.Client2.JukeboxService.ISearchService CreateChannel() {
            return new SearchServiceClientChannel(this);
        }
        
        private class SearchServiceClientChannel : ChannelBase<Jukebox.Client2.JukeboxService.ISearchService>, Jukebox.Client2.JukeboxService.ISearchService {
            
            public SearchServiceClientChannel(System.ServiceModel.ClientBase<Jukebox.Client2.JukeboxService.ISearchService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginSearch(string query, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = query;
                System.IAsyncResult _result = base.BeginInvoke("Search", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<Jukebox.Client2.JukeboxService.Track> EndSearch(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<Jukebox.Client2.JukeboxService.Track> _result = ((System.Collections.ObjectModel.ObservableCollection<Jukebox.Client2.JukeboxService.Track>)(base.EndInvoke("Search", _args, result)));
                return _result;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="JukeboxService.IPolicyService")]
    public interface IPolicyService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPolicyService/GetSilverlightPolicy", ReplyAction="http://tempuri.org/IPolicyService/GetSilverlightPolicyResponse")]
        System.IAsyncResult BeginGetSilverlightPolicy(System.AsyncCallback callback, object asyncState);
        
        byte[] EndGetSilverlightPolicy(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPolicyServiceChannel : Jukebox.Client2.JukeboxService.IPolicyService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetSilverlightPolicyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetSilverlightPolicyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public byte[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PolicyServiceClient : System.ServiceModel.ClientBase<Jukebox.Client2.JukeboxService.IPolicyService>, Jukebox.Client2.JukeboxService.IPolicyService {
        
        private BeginOperationDelegate onBeginGetSilverlightPolicyDelegate;
        
        private EndOperationDelegate onEndGetSilverlightPolicyDelegate;
        
        private System.Threading.SendOrPostCallback onGetSilverlightPolicyCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public PolicyServiceClient() {
        }
        
        public PolicyServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public PolicyServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PolicyServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PolicyServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<GetSilverlightPolicyCompletedEventArgs> GetSilverlightPolicyCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Jukebox.Client2.JukeboxService.IPolicyService.BeginGetSilverlightPolicy(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetSilverlightPolicy(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        byte[] Jukebox.Client2.JukeboxService.IPolicyService.EndGetSilverlightPolicy(System.IAsyncResult result) {
            return base.Channel.EndGetSilverlightPolicy(result);
        }
        
        private System.IAsyncResult OnBeginGetSilverlightPolicy(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((Jukebox.Client2.JukeboxService.IPolicyService)(this)).BeginGetSilverlightPolicy(callback, asyncState);
        }
        
        private object[] OnEndGetSilverlightPolicy(System.IAsyncResult result) {
            byte[] retVal = ((Jukebox.Client2.JukeboxService.IPolicyService)(this)).EndGetSilverlightPolicy(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetSilverlightPolicyCompleted(object state) {
            if ((this.GetSilverlightPolicyCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetSilverlightPolicyCompleted(this, new GetSilverlightPolicyCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetSilverlightPolicyAsync() {
            this.GetSilverlightPolicyAsync(null);
        }
        
        public void GetSilverlightPolicyAsync(object userState) {
            if ((this.onBeginGetSilverlightPolicyDelegate == null)) {
                this.onBeginGetSilverlightPolicyDelegate = new BeginOperationDelegate(this.OnBeginGetSilverlightPolicy);
            }
            if ((this.onEndGetSilverlightPolicyDelegate == null)) {
                this.onEndGetSilverlightPolicyDelegate = new EndOperationDelegate(this.OnEndGetSilverlightPolicy);
            }
            if ((this.onGetSilverlightPolicyCompletedDelegate == null)) {
                this.onGetSilverlightPolicyCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetSilverlightPolicyCompleted);
            }
            base.InvokeAsync(this.onBeginGetSilverlightPolicyDelegate, null, this.onEndGetSilverlightPolicyDelegate, this.onGetSilverlightPolicyCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override Jukebox.Client2.JukeboxService.IPolicyService CreateChannel() {
            return new PolicyServiceClientChannel(this);
        }
        
        private class PolicyServiceClientChannel : ChannelBase<Jukebox.Client2.JukeboxService.IPolicyService>, Jukebox.Client2.JukeboxService.IPolicyService {
            
            public PolicyServiceClientChannel(System.ServiceModel.ClientBase<Jukebox.Client2.JukeboxService.IPolicyService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginGetSilverlightPolicy(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetSilverlightPolicy", _args, callback, asyncState);
                return _result;
            }
            
            public byte[] EndGetSilverlightPolicy(System.IAsyncResult result) {
                object[] _args = new object[0];
                byte[] _result = ((byte[])(base.EndInvoke("GetSilverlightPolicy", _args, result)));
                return _result;
            }
        }
    }
    
    public class OnCurrentTrackChangedReceivedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public OnCurrentTrackChangedReceivedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Jukebox.Client2.JukeboxService.Track track {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Jukebox.Client2.JukeboxService.Track)(this.results[0]));
            }
        }
    }
    
    public class OnTrackAddedReceivedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public OnTrackAddedReceivedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Jukebox.Client2.JukeboxService.Track track {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Jukebox.Client2.JukeboxService.Track)(this.results[0]));
            }
        }
    }
    
    public class OnTrackRemovedReceivedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public OnTrackRemovedReceivedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Jukebox.Client2.JukeboxService.Track track {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Jukebox.Client2.JukeboxService.Track)(this.results[0]));
            }
        }
    }
    
    public class OnTrackStateChangedReceivedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public OnTrackStateChangedReceivedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Jukebox.Client2.JukeboxService.Track track {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Jukebox.Client2.JukeboxService.Track)(this.results[0]));
            }
        }
    }
}
